//The name of the sheet this script uses. If you need it to be called something else, change this variable to something else.
var priceSheetName = "Prices";

//Adds the menu to the spreadsheet
function onOpen()
{
  SpreadsheetApp.getUi().createMenu("RuneScape Price Updater")
      .addItem("Manual", "showManualPrompt_")
      .addItem("Generate price sheet", "generatePriceUpdateSheet")
      .addSeparator()
      .addItem("Update price for row...", "showUpdateSpecificRowPrompt_")
      .addSeparator()
      .addItem("Update prices for row 2 - 49", "updateRowsBatch1")
      .addItem("Update prices for row 50 - 99", "updateRowsBatch2")
      .addItem("Update prices for row 100 - 149", "updateRowsBatch3")
      .addItem("Update prices for row 150 - 199", "updateRowsBatch4")
      .addItem("Update prices for row 200 - 249", "updateRowsBatch5")
      .addItem("Update prices for row 250 - 299", "updateRowsBatch6")
      .addItem("Update prices for row 300 - 349", "updateRowsBatch7")
      .addItem("Update prices for row 350 - 399", "updateRowsBatch8")
      .addItem("Update prices for row 400 - 449", "updateRowsBatch9")
      .addItem("Update prices for row 450 - 499", "updateRowsBatch10")
      .addSeparator()
      .addItem("About", "showAboutPrompt_")
      .addToUi();
}

//Display prompt displayed when updating a specific row
function showUpdateSpecificRowPrompt_()
{
  var ui = SpreadsheetApp.getUi();
  var result = ui.prompt("Update price for a specific row", "Row", ui.ButtonSet.OK_CANCEL);
  var button = result.getSelectedButton();
  var text = result.getResponseText();
  
  if (button == ui.Button.OK)
  {
    if(isNumber_(text))
    {
      updatePricesForRange_(text, text);
    }
    else
    {
      ui.alert("'" + text + "' is not a valid number.");
    }
  }
}

function showManualPrompt_()
{
  var textDescription = "This script will generate a sheet which will automatically keep item prices up to date. Click the 'Generate price sheet' button in the RuneScape Price Updater dropdown menu to get started.";
  textDescription += "\nThen, simply add the names and IDs of the items you wish to track to the " + priceSheetName + " sheet, and the script will handle the rest.";
  
  var textHowToRefer = "To get the price of an item into another sheet, simply set the text of the cell you want to fill with '=" + priceSheetName + "!D2'.";
  textHowToRefer += " Replace the number 2 to reflect the row that corresponds to the item of interest.";
  
  var textItemID = "To get the ID of an item:";
  textItemID += "\n- Go to the RuneScape homepage (www.runescape.com)";
  textItemID += "\n- Go to the Grand Exchange part of the website";
  textItemID += "\n- Search for the item you're interested in, and go to that items' page";
  textItemID += "\n- The item's ID will be the last part of the URL";
  textItemID += "\n- For example, the Cabbage URL is 'http://services.runescape.com/m=itemdb_rs/Cabbage/viewitem?obj=1965', so the ID for Cabbage is 1965.";
  
  var textOutdated = "Important: Sometimes, items will not update. This is normal, and is caused by Jagex's API being unreliable. In the worst case, some item prices might be a few hours outdated.";
  textOutdated += "\nIf you're first setting this up, give it about a day to ensure all items are updated, or manually insert the prices into the sheet.";
  textOutdated += "\nThe 'Last succesful update' and 'Last attempted update' columns can give you an idea of how outdated an item's price is.";
  
  var ui = SpreadsheetApp.getUi();
  ui.alert("RuneScape Price Updater - Manual", textDescription + "\n\n" + textHowToRefer + "\n\n" + textItemID + "\n\n" + textOutdated, ui.ButtonSet.OK);
}

//Prompt displayed when updating a specific row
function showAboutPrompt_()
{
  var newestVersionNumber = getNewestVersionNumber_();
  var textVersion = "Version " + version_ + (newestVersionNumber == version_ ? "" : " (A new version is available on GitHub, version " + newestVersionNumber + ")");
  var textContact = "This script was written by Zenyl. If you have any questions or feedback, feel free to send me a message on Reddit (/u/zenyl) or in-game (RSN Zenyl).";
  var textDisclaimer = "Disclaimer: I am not affiliated with Jagex in any way. This script is developed for use with their public APIs.";
  var textGithub = "Github repository: https://github.com/DevAndersen/RSAutoPriceUpdater";
  var textLicense = "License: GNU General Public License 3.";
  var ui = SpreadsheetApp.getUi();
  ui.alert("RuneScape Price Updater - About", textVersion + "\n\n" + textContact + "\n\n" + textDisclaimer + "\n\n" + textGithub + "\n\n" + textLicense, ui.ButtonSet.OK);
}

function generatePriceUpdateSheet()
{
  //Throw error if not called from a spreadsheet
  if(SpreadsheetApp.getActive() == null)
    throw new Error("This function must be run in relation to a Google Spreadsheet.");
  
  //Throw error if a sheet with {sheetName} already exists
  if(SpreadsheetApp.getActive().getSheetByName(priceSheetName) != null)
    throw new Error("A sheet by the name '" + priceSheetName + "' already exists. Either delete the existing sheet or change the 'priceSheetName' variable at the top of the script.");
  
  //Column headers *********************************************************************************************************************
  var titles = ["Icon", "Item ID", "Item name", "Price", "Last succesful update", "Last attempted update", "Price 2", "LSU 2", "LAU 2", "Price 3", "LSU 3", "LAU 3", "Price 4", "LSU 4", "LAU 4", "Price 5", "LSU 5", "LAU 5", "Price 6", "LSU 6", "LAU 6", "Price 7", "LSU 7", "LAU 7"];
  
  //Create sheet
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.insertSheet(priceSheetName);
  
  //Format sheet and cells
  sheet.deleteColumns(1, 25);
  
  for(row = 1; row <= titles.length; row++)
  {
    sheet.getRange(1, row).setValue(titles[row - 1]);
    sheet.getRange(1, row).setFontWeight("bold");
    sheet.getRange(1, row).setHorizontalAlignment("center");
  }
  
  sheet.setFrozenRows(1);
  sheet.setColumnWidth(1, 33);
  sheet.setColumnWidth(3, 150);
  sheet.autoResizeColumn(5);
  sheet.autoResizeColumn(6);
  sheet.deleteRows(499, 501);
  sheet.setColumnWidth(4, 107);
  
  //Fill data rows ********************************************************************************************
  for(item = 2; item <= 499; item++)
  {
    sheet.setRowHeight(item, 33);
    sheet.getRange(item, 1).setValue("=IMAGE(\"http://services.runescape.com/m=itemdb_rs/obj_sprite.gif?id=\" & B" + item + ")");
    sheet.getRange(item, 4).setNumberFormat("#,##0 gp");
    sheet.getRange(item, 2).setHorizontalAlignment("center");
    sheet.getRange(item, 7).setNumberFormat("#,##0 gp"); //////////////////////////////////
    sheet.getRange(item, 10).setNumberFormat("#,##0 gp"); //////////////////////////////
    sheet.getRange(item, 13).setNumberFormat("#,##0 gp"); /////////////////////////////////
    sheet.getRange(item, 16).setNumberFormat("#,##0 gp"); ////////////////////////////////
    sheet.getRange(item, 19).setNumberFormat("#,##0 gp"); //////////////////////////////////
    sheet.getRange(item, 22).setNumberFormat("#,##0 gp"); //////////////////////////////////////
 
  }
  
  //Set up triggers ****************************************************************************************************
  for(batch = 1; batch <= 7; batch++)  // create 7 triggers
  {
    //Removes existing trigger
    var triggers = ScriptApp.getProjectTriggers();
    for(trigger = 0; trigger < triggers.length; trigger++)
    {
      if(triggers[trigger].getHandlerFunction() == "updateRowsBatch" + batch)
      {
        ScriptApp.deleteTrigger(triggers[trigger]);
      }
    }
    
    //Creates triggers ****************************************************************************************************
    if     (batch = 1)     {
      ScriptApp.newTrigger("updateRowsBatch" + batch).timeBased().onWeekDay(ScriptApp.WeekDay.MONDAY).create()
    }
    else if(batch = 2){
      ScriptApp.newTrigger("updateRowsBatch" + batch).timeBased().onWeekDay(ScriptApp.WeekDay.TUESDAY).create()
    }    
    else if(batch = 3){
      ScriptApp.newTrigger("updateRowsBatch" + batch).timeBased().onWeekDay(ScriptApp.WeekDay.WEDNESDAY).create()
    }    
    else if(batch = 4){
      ScriptApp.newTrigger("updateRowsBatch" + batch).timeBased().onWeekDay(ScriptApp.WeekDay.THURSDAY).create()
    }    
    else if(batch = 5){
      ScriptApp.newTrigger("updateRowsBatch" + batch).timeBased().onWeekDay(ScriptApp.WeekDay.FRIDAY).create()
    }    
    else if(batch = 6){
      ScriptApp.newTrigger("updateRowsBatch" + batch).timeBased().onWeekDay(ScriptApp.WeekDay.SATURDAY).create()
    }    
    else              {
      ScriptApp.newTrigger("updateRowsBatch" + batch).timeBased().onWeekDay(ScriptApp.WeekDay.SUNDAY).create()
    };
    
  }
  
  var ui = SpreadsheetApp.getUi();
  ui.alert("Setup complete", "The script and auto-updaters have succesfully been set up. You can now start adding items, which will automatically be kept up to date.", ui.ButtonSet.OK);
}

//Trigger functions **************************************************************************************
function updateRowsBatch1()  { updatePricesForRange_(  2, 200); }

function updateRowsBatch2()  { updatePricesForRange2_(  2, 200); }  //

function updateRowsBatch3()  { updatePricesForRange3_(  2, 200); }  //

function updateRowsBatch4()  { updatePricesForRange4_(  2, 200); }  //

function updateRowsBatch5()  { updatePricesForRange5_(  2, 200); }  //

function updateRowsBatch6()  { updatePricesForRange6_(  2, 200); }  //

function updateRowsBatch7()  { updatePricesForRange7_(  2, 200); }  //


//Updates the item prices from row {from} to row {to}. ************************************************************
function updatePricesForRange_(from, to)
{  
  for(row = from; row <= to; row++)
  {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(priceSheetName);
    var itemID = sheet.getRange(row, 2).getValue();
    if(itemID != "" && isNumber_(itemID) && itemID >= 0)
    {
      Utilities.sleep(5000);
      var newPrice = getPrice_(itemID);
      var sheet = SpreadsheetApp.getActive().getSheetByName(priceSheetName);
      var now = new Date();
      if(newPrice != -1)
      {
        sheet.getRange(row, 4).setValue(newPrice);
        sheet.getRange(row, 5).setValue(now);
      }
      sheet.getRange(row, 6).setValue(now);
    }
  }
}

function updatePricesForRange2_(from, to)  ///////////////////////////////////////////////////////////////////////////////////////////////////
{  
  for(row = from; row <= to; row++)
  {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(priceSheetName);
    var itemID = sheet.getRange(row, 2).getValue();
    if(itemID != "" && isNumber_(itemID) && itemID >= 0)
    {
      Utilities.sleep(5000);
      var newPrice = getPrice_(itemID);
      var sheet = SpreadsheetApp.getActive().getSheetByName(priceSheetName);
      var now = new Date();
      if(newPrice != -1)
      {
        sheet.getRange(row, 7).setValue(newPrice);  //
        sheet.getRange(row, 8).setValue(now);  //
      }
      sheet.getRange(row, 9).setValue(now);  //
    }
  }
}

function updatePricesForRange3_(from, to)  ///////////////////////////////////////////////////////////////////////////////////////////////////
{  
  for(row = from; row <= to; row++)
  {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(priceSheetName);
    var itemID = sheet.getRange(row, 2).getValue();
    if(itemID != "" && isNumber_(itemID) && itemID >= 0)
    {
      Utilities.sleep(5000);
      var newPrice = getPrice_(itemID);
      var sheet = SpreadsheetApp.getActive().getSheetByName(priceSheetName);
      var now = new Date();
      if(newPrice != -1)
      {
        sheet.getRange(row, 10).setValue(newPrice);  //
        sheet.getRange(row, 11).setValue(now);  //
      }
      sheet.getRange(row, 12).setValue(now);  //
    }
  }
}

function updatePricesForRange4_(from, to)  ///////////////////////////////////////////////////////////////////////////////////////////////////
{  
  for(row = from; row <= to; row++)
  {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(priceSheetName);
    var itemID = sheet.getRange(row, 2).getValue();
    if(itemID != "" && isNumber_(itemID) && itemID >= 0)
    {
      Utilities.sleep(5000);
      var newPrice = getPrice_(itemID);
      var sheet = SpreadsheetApp.getActive().getSheetByName(priceSheetName);
      var now = new Date();
      if(newPrice != -1)
      {
        sheet.getRange(row, 13).setValue(newPrice);  //
        sheet.getRange(row, 14).setValue(now);  //
      }
      sheet.getRange(row, 15).setValue(now);  //
    }
  }
}

function updatePricesForRange5_(from, to)  ///////////////////////////////////////////////////////////////////////////////////////////////////
{  
  for(row = from; row <= to; row++)
  {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(priceSheetName);
    var itemID = sheet.getRange(row, 2).getValue();
    if(itemID != "" && isNumber_(itemID) && itemID >= 0)
    {
      Utilities.sleep(5000);
      var newPrice = getPrice_(itemID);
      var sheet = SpreadsheetApp.getActive().getSheetByName(priceSheetName);
      var now = new Date();
      if(newPrice != -1)
      {
        sheet.getRange(row, 16).setValue(newPrice);  //
        sheet.getRange(row, 17).setValue(now); //
      }
      sheet.getRange(row, 18).setValue(now);  //
    }
  }
}

function updatePricesForRange6_(from, to)  ///////////////////////////////////////////////////////////////////////////////////////////////////
{  
  for(row = from; row <= to; row++)
  {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(priceSheetName);
    var itemID = sheet.getRange(row, 2).getValue();
    if(itemID != "" && isNumber_(itemID) && itemID >= 0)
    {
      Utilities.sleep(5000);
      var newPrice = getPrice_(itemID);
      var sheet = SpreadsheetApp.getActive().getSheetByName(priceSheetName);
      var now = new Date();
      if(newPrice != -1)
      {
        sheet.getRange(row, 19).setValue(newPrice);  //
        sheet.getRange(row, 20).setValue(now);  //
      }
      sheet.getRange(row, 21).setValue(now);  //
    }
  }
}

function updatePricesForRange7_(from, to)  /////////////////////////////////////////////////////////////////////////////////////////////////
{  
  for(row = from; row <= to; row++)
  {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(priceSheetName);
    var itemID = sheet.getRange(row, 2).getValue();
    if(itemID != "" && isNumber_(itemID) && itemID >= 0)
    {
      Utilities.sleep(5000);
      var newPrice = getPrice_(itemID);
      var sheet = SpreadsheetApp.getActive().getSheetByName(priceSheetName);
      var now = new Date();
      if(newPrice != -1)
      {
        sheet.getRange(row, 22).setValue(newPrice);  //
        sheet.getRange(row, 23).setValue(now);  //
      }
      sheet.getRange(row, 24).setValue(now);  //
    }
  }
}



//Attempts to get the price of an item based on its item ID. Returns -1 if an error occurs.
function getPrice_(id)
{
  try
  {
    var api = "http://services.runescape.com/m=itemdb_rs/api/graph/";
    var i = JSON.parse(UrlFetchApp.fetch(api + id + ".json"))["daily"];
    var e = Object.keys(i).sort().reverse()[0];
    return i[e];
  }
  catch(err)
  {
    return -1;
  }
}

//Returns true if the input is a valid number. Returns false if the input is not a valid number.
function isNumber_(input)
{
  if(parseInt(input).toFixed() == "NaN")
    return false;
  return true;
}

function getNewestVersionNumber_()
{
  var url = "https://raw.githubusercontent.com/DevAndersen/RSAutoPriceUpdater/master/RSAutoPriceUpdater.gs";
  var content = UrlFetchApp.fetch(url);
  var lines = ("" + content).split("\n");
  for(i = 0; i < lines.length; i++)
  {
    if(lines[i].indexOf("var version_ = ") != -1 && lines[i].indexOf("indexOf") == -1)
    {
      return ("" + lines[i]).split("\"")[1];
    }
  }
  return "[Error retrieving version number from GitHub]";
}

var version_ = "1.2";
